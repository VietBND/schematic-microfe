import { apply, applyTemplates, chain, mergeWith, move, Rule, SchematicContext, Tree, url } from '@angular-devkit/schematics';
import { strings } from '@angular-devkit/core';
// You don't have to export the function as default. You can also have more than one rule factory
// per file.
export function microfeSchematic(_options: any): Rule {
  return (tree: Tree, _context: SchematicContext) => {
    // 1. Th√™m webpack.config.js

    // const webpackConfig = `// webpack.config.js content`;
    // tree.create('/webpack.config.js', webpackConfig);

    // // 2. Modify angular.json
    // const angularJsonBuffer = tree.read('angular.json');
    // if (angularJsonBuffer) {
    //   const angularJson = JSON.parse(angularJsonBuffer.toString());
    //   // Modify build -> customWebpackConfig
    //   angularJson.projects['app-name'].architect.build.options.customWebpackConfig = {
    //     path: './webpack.config.js',
    //   };
    //   tree.overwrite('angular.json', JSON.stringify(angularJson, null, 2));
    // }

    // // 3. Add mfe.config.ts (tu·ª≥ m√¨nh ƒë·ªãnh nghƒ©a)
    // tree.create('/mfe.config.ts', `export const remotes = [...]`);

    // _context.logger.info('‚úÖ Microfrontend setup complete!');
    // Logger ra cho vui
    _context.logger.info(`üöÄ Setting up Module Federation for: ${_options.projectName}`);

    // B1: Load th∆∞ m·ª•c ./files l√†m template source
    const templateSource = apply(url('./files'), [
      // Truy·ªÅn bi·∫øn v√†o file template, c√≥ th·ªÉ d√πng c·∫£ string utils nh∆∞ dasherize, classify...
      applyTemplates({
        ...strings,         // ƒë·ªÉ d√πng helpers nh∆∞ dasherize, classify,...
        ..._options          // truy·ªÅn bi·∫øn projectName ƒë·ªÉ template render
      }),

      // Di chuy·ªÉn t·∫•t c·∫£ file t·ª´ files/ v√†o th∆∞ m·ª•c root (ho·∫∑c c√≥ th·ªÉ move ƒë·∫øn 'projects/xyz' n·∫øu mu·ªën)
      move('./')
    ]);

    // B2: G·ªôp c√°c Rule l·∫°i (·ªü ƒë√¢y m·ªõi ch·ªâ t·∫°o file)
    return chain([
      mergeWith(templateSource)
    ]);

  };
}
